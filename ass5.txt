import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

df = pd.read_csv('Social_Network_Ads.csv')

df

df.shape

df.columns

df.dtypes

df.info()

df.describe()

x = df.iloc[:, [2, 3]].values
x

y = df.iloc[:, 4].values
y

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state=45)

x_train

x_test.shape

y_test

y_test.shape

from sklearn.preprocessing import StandardScaler
sc_x = StandardScaler()
x_train = sc_x.fit_transform(x_train)
x_test = sc_x.fit_transform(x_test)

x_train

from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state = 0)
classifier.fit(x_train, y_train)

y_pred = classifier.predict(x_test)

y_pred

y_test

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
cm

from sklearn.metrics import accuracy_score
accuracy = accuracy_score(y_test, y_pred) * 100
accuracy

tp = cm[0, [0]]
print('True Positive : ',tp)

fp = cm[0, [1]]
print('False Positive : ',fp)

fn = cm[1, [0]]
print('False Negative : ',fn)

tn = cm[1, [1]]
print('True Negative : ',tn)

accuracy_cm = ((tp + tn)/(tp + fp + fn + tn))
print('Accuracy : ',accuracy_cm*100)

error_rate_cm = ((fp + fn)/(tp + fp + fn + tn))
print('Error Rate : ',error_rate_cm*100)

precision_cm = (tp / (tp + fp))
print('Precision : ',precision_cm*100)

recall_cm = (tp / (tp + fn))
print('Sensitivity : ',recall_cm*100)

specificity_cm = (tn / (tn + fp))
print('Specitivity :',specificity_cm*100)